1. Продумать, где можно применить замыкания для практикума из седьмого урока. 

Приходит на ум мой счетчик для подсчета очков игрока, его можно было бы реализовать как пример из методички:
function makeCounter() {
var count = 0;
   function counter() {
      count = count + 1;
      return count;
   }
   return counter;
}


2. Не выполняя код, ответить, что выведет браузер и почему:
а. 
if (!("a" in window)) {
    var a = 1;
}
alert(a);

в JS объявления переменных происходят в первую очередь. то есть компьютер сначала увидит var, будет знать, 
что а существует,  а потом будет проверять, Если "a" не in window, то есть если а не существует в глобальной 
переменной window (а она уже существует) то а присвоить 1. Соответственно присвоения не произойдет и alert(a)
выведет undefined. Как-то так я это поняла.

b. 
var b = function a(x) {
    x && a(--x);
};
alert(a);

Тут мне так и не удалось разобраться, что же именно происходит внутри функции, но не зависимо от этого, я думаю, 
что вывести а не получится, т.к. она не была определена. Ведь функция а(х) была записана в переменную b, и тем более
в alert(a) а вызывается не как функция (например alert(a(1))), а как переменная.

c.
function a(x) {
    return x * 2;
}
var a;
alert(a);

Как я понимаю, var всегда выполняется в первую очередь, поэтому сначала инициализируется а, а потом а становится 
функцией и alert(a) выведет текст функции, потому что мы не вызывает ее выполнение (там же не а()), а именно 
просим показать, что в ней

d.
function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);

Задается функция под названием b которая принимает в себя три аргумента (x, y, a). В теле второй аргемент она 
делает равным 10. Поскольку нумирация начинается с 0, то arguments[2] = 10 это то же что и а = 10. Затем она 
выводит а пользователю. Ниже вы вызываем функцию b с аргументами 1, 2, 3. Собственно, какие бы аргументы мы 
ни передали бы, нам вернется 10, так работает эта функция.


e.
function a() {
    alert(this);
}
a.call(null);

Внутри функции а this указывает на глобальный объект window. То есть просто alert(this) вернет объект window. 
метод call позволяет конкретно задать this с помощью первого параметра. Т.е. параметр null используется 
в качестве значения this но это равносильно тому, чтобы вызвать call() без аргументов. И мы возвращаемся к тому, 
что alert(this) вернет объект window.


